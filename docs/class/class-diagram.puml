@startuml School Management System - Class Diagram
title School Management System - Class Diagram

' Layout settings
skinparam Linetype ortho
skinparam classAttributeIconSize 0
hide circle

' Style settings
skinparam class {
    color black
    BackgroundColor white
    BorderColor black
    ArrowColor black
}

abstract class User {
    # id
    # firstName
    # lastName
    # email
    # phone
    # address
    # schoolId
    # lastLogin
    # isActive
    # username
    # password
    # fingerprint
    
    + login()
    + logout()
    + verifyFingerprint()
    + updateProfile()
    + changePassword()
    + createAccount()
    + deleteAccount()
    + updateAccount()
}

class Student {
    - studentId
    - classIndex
    - enrollmentDate
    
    + createStudent()
    + updateStudent()
    + deleteStudent()
}

class Teacher {
    # teacherId
    # joiningDate
    
    + manageAssessments()
    + manageExams()
    + gradeSubmissions()
    + generateReports()
}

class SectionalHead {
    # sectionHeadId
    # sectionId
    
    + manageTeachers()
    + manageTimeTable()
    + approveLeaveRequests()
    + generateSectionReport()
    + createSectionalHeadAccount()
    + deleteSectionalHeadAccount()
    + updateSectionalHeadAccount()
}

class Principal {
    # principalId
    # appointmentDate
    
    + broadcastAnnouncement()
    + reviewReports()
    + manageStaff()
    + reviewPerformance()
    + generateSchoolReport()
    + generateStaffReport()
    + generatePerformanceReport()
    + createPrincipalAccount()
    + deletePrincipalAccount()
    + updatePrincipalAccount()
    + viewPrincipalAccount()
}

class Admin {
    - adminId
    - accessLevel
    
    + manageUsers()
    + configureSystem()
    + backupData()
    + generateSystemReports()
    + createAdminAccount()
}

class Class {
    - id
    - grade
    - section
    
    + addClass()
    + updateClass()
    + deleteClass()
    + assignTeacher()
    + assignStudents()
}

class Assessment {
    - id
    - title
    - description
    - dueDate
    - totalMarks
    - assignedTo
    
    + createAssessment()
    + updateAssessment()
    + deleteAssessment()
    + assignToStudents()
    + submitAssessment()
    + viewAssessments()
}

class Exam {
    - id
    - status
    - examType
    - year
    - term
    - date
    - duration
    - passMarks
    
    + createExam()
    + updateExam()
    + deleteExam()
    + assignToClasses()
    + generateResults()
    + viewExams()
}

class ExamResult {
    - id
    - marks
    - grade
    - remarks
    - date
    
    + calculateGrade()
    + generateReport()
    + updateResult()
    + deleteResult()
    + publishResult()
    + applyForRecorrection()
}

class TimeTable {
    - id
    - validFrom
    - validTo
    
    + createSchedule()
    + updateSchedule()
    + deleteSchedule()
    + validateSchedule()
}

class Session {
    - id
    - startTime
    - endTime
    - dayOfWeek
    
    + createSession()
    + updateSession()
    + deleteSession()
    + validateTime()
}

class Subject {
    # id
    # name
    # description

    + addSubject()
    + updateSubject()
    + deleteSubject()
    + assignToTeacher()
    + viewSubjects()
}

class Attendance {
    - id
    - date
    - status
    - remarks
    
    + markAttendance()
    + updateAttendance()
    + calculateAttendancePercentage()
    + generateAttendanceReport()
    + viewAttendance()
}

' Inheritance relationships
User <|-- Student
User <|-- Teacher
User <|-- Admin
Teacher <|-- SectionalHead
SectionalHead <|-- Principal

' Composition with multiplicities (strong ownership)
User "✱" *-- "✱" Attendance : records
User "1" *-- "✱" TimeTable : manages
Class "1" *-- "1" TimeTable : has
TimeTable "1" *-- "✱" Session : contains

' Aggregation with multiplicities (weak ownership)
Class "1" o-- "✱" Student : consists-of
Class "1" o-- "✱" Assessment : has
Class "1" o-- "✱" Exam : has
Student "✱" o-- "✱" Subject : has
Subject "1" o-- "✱" Assessment : includes
Subject "1" o-- "✱" Session : taught-in
Exam "1" o-- "✱" ExamResult : has

' Association with multiplicities (relationships)
Student "✱" -- "✱" Exam : takes
Teacher "✱" -- "✱" Subject : teaches
Teacher "1" -- "✱" Exam : marks
Teacher "1" -- "✱" TimeTable : follows
Teacher "1" -- "✱" Student : teaches
SectionalHead "1" -- "✱" Teacher : supervises
Principal "1" -- "✱" SectionalHead : manages
Principal "1" -- "✱" User : administers
SectionalHead "1" -- "✱" Class : supervises
SectionalHead "1" -- "✱" Exam : conducts

' Dependency relationships
Exam -- Attendance : "records"
Admin -- "✱" User : administers
Admin -- "✱" Exam : modify 
Admin -- "✱" Class : modify

@enduml
