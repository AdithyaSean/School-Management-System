@startuml Messaging System Sequence

actor Sender
actor Receiver
participant "Message UI" as UI
participant "Message Controller" as Ctrl
participant "Message Service" as MSvc
participant "Notification Service" as Notify
database "Message Database" as DB
participant "Log Service" as Log

== Send Message ==
Sender -> UI: Compose Message
activate UI
UI -> Ctrl: sendMessage(senderId, receiverId, content)
activate Ctrl
Ctrl -> MSvc: processMessage(senderId, receiverId, content)
activate MSvc
MSvc -> DB: storeMessage()
DB --> MSvc: confirm
MSvc -> Notify: notifyReceiver(receiverId)
Notify --> MSvc: notification sent
MSvc -> Log: updateMessageLog()
Log --> MSvc: log updated
MSvc --> Ctrl: success
Ctrl --> UI: show confirmation
UI --> Sender: message sent
deactivate UI
deactivate Ctrl
deactivate MSvc

== Receive Message ==
Receiver -> UI: View Messages
activate UI
UI -> Ctrl: getMessages(receiverId)
activate Ctrl
Ctrl -> MSvc: fetchMessages(receiverId)
activate MSvc
MSvc -> DB: queryMessages()
DB --> MSvc: messages
MSvc --> Ctrl: message list
Ctrl --> UI: display messages
UI --> Receiver: show messages
deactivate UI
deactivate Ctrl
deactivate MSvc

== Read Message ==
Receiver -> UI: Open Message
activate UI
UI -> Ctrl: markAsRead(messageId)
activate Ctrl
Ctrl -> MSvc: updateMessageStatus(messageId, "read")
activate MSvc
MSvc -> DB: updateMessageStatus()
DB --> MSvc: confirm
MSvc -> Log: updateReadLog()
Log --> MSvc: log updated
MSvc --> Ctrl: success
Ctrl --> UI: show message
UI --> Receiver: display message content
deactivate UI
deactivate Ctrl
deactivate MSvc

@enduml
