@startuml Report Generation Sequence

actor Administrator
actor Principal
participant "Report UI" as UI
participant "Report Controller" as Ctrl
participant "Report Service" as RSvc
participant "Notification Service" as Notify
database "Report Database" as DB
participant "Log Service" as Log

== Generate Report ==
Administrator -> UI: Select Report Type
activate UI
UI -> Ctrl: generateReport(reportType, parameters)
activate Ctrl
Ctrl -> RSvc: createReport(reportType, parameters)
activate RSvc

alt reportType == "attendance"
    RSvc -> DB: queryAttendanceData()
    DB --> RSvc: attendanceData
    RSvc -> RSvc: calculateAttendanceStats()
else reportType == "performance"
    RSvc -> DB: queryExamResults()
    DB --> RSvc: examData
    RSvc -> RSvc: calculatePerformanceMetrics()
else reportType == "utilization"
    RSvc -> DB: querySystemLogs()
    DB --> RSvc: systemData
    RSvc -> RSvc: calculateUtilization()
end

RSvc -> DB: storeReport()
DB --> RSvc: confirm
RSvc -> Notify: notifyPrincipal(reportId)
Notify --> RSvc: notification sent
RSvc -> Log: updateReportLog()
Log --> RSvc: log updated
RSvc --> Ctrl: report generated
Ctrl --> UI: show report
UI --> Administrator: display report
deactivate UI
deactivate Ctrl
deactivate RSvc

== View Report ==
Principal -> UI: View Report
activate UI
UI -> Ctrl: getReport(reportId)
activate Ctrl
Ctrl -> RSvc: fetchReport(reportId)
activate RSvc
RSvc -> DB: queryReport()
DB --> RSvc: reportData
RSvc --> Ctrl: report
Ctrl --> UI: display report
UI --> Principal: show report
deactivate UI
deactivate Ctrl
deactivate RSvc

@enduml
