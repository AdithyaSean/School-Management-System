@startuml Teacher Assessment Management

actor "Teacher" as T
participant "UI" as UI
participant "AssessmentController" as AC
participant "AssessmentService" as AS
participant "StudentService" as SS
participant "NotificationService" as NS
participant "Log" as L
database "Database" as DB

== Create Assessment ==
T -> UI: Create Assessment
activate UI
UI -> AC: createAssessment(data)
activate AC

AC -> AS: validateAssessmentData()
activate AS
AS --> AC: validationResult
deactivate AS

AC -> AS: createAssessment()
activate AS
AS -> DB: save()
DB --> AS: assessmentId
AS --> AC: assessmentCreated
deactivate AS

AC -> SS: getAssignedStudents()
activate SS
SS -> DB: fetch()
DB --> SS: students
SS --> AC: studentsList
deactivate SS

AC -> NS: notifyStudents(studentsList)
activate NS
NS -> DB: saveNotifications()
DB --> NS: success
NS --> AC: studentsNotified
deactivate NS

AC -> L: logAction("Assessment Created")
activate L
L -> DB: save()
DB --> L: logged
deactivate L

AC --> UI: success
deactivate AC
UI --> T: showSuccess
deactivate UI

== Edit Assessment ==
T -> UI: Edit Assessment
activate UI
UI -> AC: updateAssessment(id, data)
activate AC

AC -> AS: findAssessment(id)
activate AS
AS -> DB: fetch()
DB --> AS: assessment
AS --> AC: assessment
deactivate AS

AC -> AS: updateAssessment()
activate AS
AS -> DB: update()
DB --> AS: success
AS --> AC: assessmentUpdated
deactivate AS

AC -> NS: notifyStudentsOfUpdate()
activate NS
NS -> DB: saveNotifications()
DB --> NS: success
NS --> AC: studentsNotified
deactivate NS

AC -> L: logAction("Assessment Updated")
activate L
L -> DB: save()
DB --> L: logged
deactivate L

AC --> UI: success
deactivate AC
UI --> T: showSuccess
deactivate UI

== Delete Assessment ==
T -> UI: Delete Assessment
activate UI
UI -> AC: deleteAssessment(id)
activate AC

AC -> AS: findAssessment(id)
activate AS
AS -> DB: fetch()
DB --> AS: assessment
AS --> AC: assessment
deactivate AS

AC -> AS: deleteAssessment()
activate AS
AS -> DB: delete()
DB --> AS: success
AS --> AC: assessmentDeleted
deactivate AS

AC -> NS: notifyStudentsOfDeletion()
activate NS
NS -> DB: saveNotifications()
DB --> NS: success
NS --> AC: studentsNotified
deactivate NS

AC -> L: logAction("Assessment Deleted")
activate L
L -> DB: save()
DB --> L: logged
deactivate L

AC --> UI: success
deactivate AC
UI --> T: showSuccess
deactivate UI

== View Assessment Status ==
T -> UI: View Assessment Status
activate UI
UI -> AC: getAssessmentStatus(id)
activate AC

AC -> AS: getAssessmentDetails()
activate AS
AS -> DB: fetch()
DB --> AS: details
AS --> AC: assessmentDetails
deactivate AS

AC -> SS: getSubmissionStatus()
activate SS
SS -> DB: fetchSubmissions()
DB --> SS: submissions
SS --> AC: submissionStatus
deactivate SS

AC -> L: logAction("Assessment Status Viewed")
activate L
L -> DB: save()
DB --> L: logged
deactivate L

AC --> UI: statusReport
deactivate AC
UI --> T: displayStatus
deactivate UI

@enduml